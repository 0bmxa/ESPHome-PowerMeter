substitutions:
  device_name: "powermeter"
  friendly_name: "Powermeter"
  project_name: "esphome.powermeter"
  project_version: "2.0"


esphome:
  name: "${device_name}"
  friendly_name: "${friendly_name}"
  project:
    name: "${project_name}"
    version: "${project_version}"


esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret powermeter_api_key

ota:
  password: !secret powermeter_ota_password

# Home WiFi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password


# # Public location of this yaml file
# dashboard_import:
#   package_import_url: github://JGAguado/Smart_Powermeter/docs/source/files/configuration.yaml@V2R2
#   import_full_config: true


time:
  - platform: homeassistant
    id: ha_time



# Sensors
sensor:
  # Analog inputs  
  - platform: adc
    pin: GPIO1
    id: Input_1
    attenuation: 12db
    update_interval: 1s
    
  - platform: adc
    pin: GPIO2
    id: Input_2
    attenuation: 12db
    update_interval: 1s
    
  - platform: adc
    pin: GPIO3
    id: Input_3
    attenuation: 12db
    update_interval: 1s
    
  - platform: adc
    pin: GPIO4
    id: Input_4
    attenuation: 12db
    update_interval: 1s
    
  - platform: adc
    pin: GPIO5
    id: Input_5
    attenuation: 12db
    update_interval: 1s
    
  - platform: adc
    pin: GPIO6
    id: Input_6
    attenuation: 12db
    update_interval: 1s


  # Clamps: Convert analog in -> AC current
  - platform: ct_clamp
    sensor: Input_1
    id: Probe_1
    name: "Probe 1"
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - calibrate_linear:
          - 0 -> 0
          - 0.042 -> 2.72
    
  - platform: ct_clamp
    sensor: Input_2
    name: "Probe 2"
    id: Probe_2
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - calibrate_linear:
          - 0 -> 0
          - 0.033 -> 1.07
    
  - platform: ct_clamp
    sensor: Input_3
    name: "Probe 3"
    id: Probe_3
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - calibrate_linear:
          - 0 -> 0
          - 0.022 -> 0.66
    
  - platform: ct_clamp
    sensor: Input_4
    name: "Probe 4"
    id: Probe_4
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - calibrate_linear:
          - 0 -> 0
          - 0.022 -> 0.66

  - platform: ct_clamp
    sensor: Input_5
    name: "Probe 5"
    id: Probe_5
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - calibrate_linear:
          - 0 -> 0
          - 0.022 -> 0.66

  - platform: ct_clamp
    sensor: Input_6
    name: "Probe 6"
    id: Probe_6
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - calibrate_linear:
          - 0 -> 0
          - 0.022 -> 0.66

  # Daily sum(?)
  - platform: total_daily_energy
    name: "Total Daily Power"
    power_id: current_power
    id: daily_power

  # ?
  - platform: template
    id: current_power
    name: "Measured Power"
    lambda: return (id(Probe_1).state + id(Probe_2).state + id(Probe_3).state) * 230.0 / 1000; #Power = Current * Voltage 
    unit_of_measurement: 'kW'
    update_interval: 5s

  # WiFi Signal     
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifisignal
    update_interval: 20s

  # Homeassistant data
  - platform: homeassistant
    id: electricity_price
    entity_id: input_number.electricity_price_kwh



# Display
# ==============

# Fonts for display
font:
  - file: powermeter/SF-Pro-Display-Medium.otf
    id: font_main
    size: 15

  # FIXME: Broken. Replace with `image_wifi` images below
  - file: powermeter/SF-Pro-Display-Medium.otf
    id: font_icon
    size: 18
    glyphs:
      - "􀙇"

# Images for display
image:
  - file: powermeter/gaugeA.png
    id: image_gaugeA
    type: TRANSPARENT_BINARY
  - file: powermeter/gaugeB.png
    id: image_gaugeB
    type: TRANSPARENT_BINARY
  - file: powermeter/mdi_home-lightning-bolt.png
    id: image_power
    resize: 18x18
    type: TRANSPARENT_BINARY
  - file: powermeter/mdi_cash-multiple.png
    id: image_cash
    resize: 18x18
    type: TRANSPARENT_BINARY
  - file: powermeter/mdi_currency-eur.png
    id: image_euro
    resize: 18x18
    type: TRANSPARENT_BINARY
  - file: powermeter/mdi_lightning-bolt.png
    id: image_bolt
    resize: 22x22
    type: TRANSPARENT_BINARY

  # - file: powermeter/wifi_0@3x.png
  #   id: image_wifi0
  #   resize: 26x18
  #   type: TRANSPARENT_BINARY
  # - file: powermeter/wifi_1@3x.png
  #   id: image_wifi1
  #   resize: 26x18
  #   type: TRANSPARENT_BINARY
  # - file: powermeter/wifi_2@3x.png
  #   id: image_wifi2
  #   resize: 26x18
  #   type: TRANSPARENT_BINARY
  # - file: powermeter/wifi_3@3x.png
  #   id: image_wifi3
  #   resize: 26x18
  #   type: TRANSPARENT_BINARY


# SPI bus for display communication
# See: https://esphome.io/components/display/waveshare_epaper
spi:
  clk_pin: GPIO12
  mosi_pin: GPIO11  # Works on the e-paper


display:
  - platform: waveshare_epaper
    cs_pin: GPIO10
    dc_pin: GPIO13
    busy_pin: GPIO14
    reset_pin: GPIO15
    model: 2.90inv2
    # model: 2.90inv2-r2   # alternative init & refresh management
    rotation: 270
    update_interval: 10s
    full_update_every: 6
    lambda: |-
      #define H_LEFT_MARGIN 4
      #define H_RIGHT_MARGIN 280
      #define H_CENTER 128 
      #define V_WEATHER 0
      #define V_CLOCK 1
      #define V_WIFI 30
      #define V_VOLTAGE 60
      #define V_BATTERY  90
      
      // WiFi quality
      // it.image(0, 0, id(background));

      // Time
      int x_head = 260;
      int y_head = 2;
      it.strftime(x_head, y_head, id(font_main), TextAlign::TOP_RIGHT, "%H:%M", id(ha_time).now());     

      // WiFi quality
      if(id(wifisignal).has_state ()) {
        if (id(wifisignal).state >= -50) {         // Excellent
            it.printf(x_head, y_head, id(font_icon), TextAlign::TOP_LEFT, "􀙇");
            
        } else if (id(wifisignal).state  >= -60) { // Good
            it.printf(x_head, y_head, id(font_icon), TextAlign::TOP_LEFT, "􀙇");

        } else if (id(wifisignal).state  >= -70) { // Weak
            it.printf(x_head, y_head, id(font_icon), TextAlign::TOP_LEFT, "􀙇");

        } else {                                   // Unlikely working
            it.printf(x_head, y_head, id(font_icon), TextAlign::TOP_LEFT, "􀙇");
        }
      }




      // Gauges
      // General parameters
      float pi = 3.141592653589793;
      float alpha = 4.71238898038469; // Defined as the gauge angle in radians (270deg)
      float beta = 2*pi - alpha;
      int radius = 25;              // Radius of the gauge in pixels
      int thick = 7;                // Size of the marker 




      // Probe 1
      int min_range = 0; 
      int max_range = 10;
      int xc = 40;
      int yc = 33;

      it.image(xc-radius, yc-radius, id(image_gaugeA));
      
      float measured = id(Probe_1).state;
      if (measured < min_range) {
        measured = min_range;
      } 
      if (measured > max_range) {
        measured = max_range;
      } 
      
      float val = (measured - min_range) / abs(max_range - min_range) * alpha;        
      int x0 = static_cast<int>(xc + radius * cos(pi / 2 + beta / 2 + val));
      int y0 = static_cast<int>(yc + radius * sin(pi / 2 + beta / 2 + val));
      int x1 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val + 0.1));
      int y1 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val + 0.1));
      int x2 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val - 0.1));
      int y2 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val - 0.1));
      it.line(x0, y0, x1, y1);
      it.line(x1, y1, x2, y2);
      it.line(x2, y2, x0, y0);
      

      it.printf(xc, yc, id(font_main), TextAlign::CENTER, "1");  
      it.printf(xc, yc + radius*0.75, id(font_main), TextAlign::TOP_CENTER, "%.1fA", measured);  




      // Probe 2
      min_range = 0; 
      max_range = 10;
      xc = 100;
      yc = 33;

      it.image(xc-radius, yc-radius, id(image_gaugeA));

      
      measured = id(Probe_2).state;
      if (measured < min_range) {
        measured = min_range;
      } 
      if (measured > max_range) {
        measured = max_range;
      } 
      
      val = (measured - min_range) / abs(max_range - min_range) * alpha;        
      x0 = static_cast<int>(xc + radius * cos(pi / 2 + beta / 2 + val));
      y0 = static_cast<int>(yc + radius * sin(pi / 2 + beta / 2 + val));
      x1 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val + 0.1));
      y1 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val + 0.1));
      x2 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val - 0.1));
      y2 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val - 0.1));
      it.line(x0, y0, x1, y1);
      it.line(x1, y1, x2, y2);
      it.line(x2, y2, x0, y0);
      

      it.printf(xc, yc, id(font_main), TextAlign::CENTER, "2");
      it.printf(xc, yc  + radius*0.75, id(font_main), TextAlign::TOP_CENTER, "%.1fA", measured);




      // Probe 3
      min_range = 0; 
      max_range = 10;
      xc = 160;
      yc = 33;

      it.image(xc-radius, yc-radius, id(image_gaugeA));

      measured = id(Probe_3).state;          
      if (measured < min_range) {
        measured = min_range;
      } 
      if (measured > max_range) {
        measured = max_range;
      } 
      
      val = (measured - min_range) / abs(max_range - min_range) * alpha;        
      x0 = static_cast<int>(xc + radius * cos(pi / 2 + beta / 2 + val));
      y0 = static_cast<int>(yc + radius * sin(pi / 2 + beta / 2 + val));
      x1 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val + 0.1));
      y1 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val + 0.1));
      x2 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val - 0.1));
      y2 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val - 0.1));
      it.line(x0, y0, x1, y1);
      it.line(x1, y1, x2, y2);
      it.line(x2, y2, x0, y0);
      

      it.printf(xc, yc, id(font_main), TextAlign::CENTER, "3");  
      it.printf(xc, yc  + radius*0.75, id(font_main), TextAlign::TOP_CENTER, "%.1fA", measured);  




      // Probe 4
      min_range = 0; 
      max_range = 10;
      xc = 40;
      yc = 95;

      it.image(xc-radius, yc-radius, id(image_gaugeA));

      measured = id(Probe_4).state;
      if (measured < min_range) {
        measured = min_range;
      } 
      if (measured > max_range) {
        measured = max_range;
      } 
      
      val = (measured - min_range) / abs(max_range - min_range) * alpha;        
      x0 = static_cast<int>(xc + radius * cos(pi / 2 + beta / 2 + val));
      y0 = static_cast<int>(yc + radius * sin(pi / 2 + beta / 2 + val));
      x1 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val + 0.1));
      y1 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val + 0.1));
      x2 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val - 0.1));
      y2 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val - 0.1));
      it.line(x0, y0, x1, y1);
      it.line(x1, y1, x2, y2);
      it.line(x2, y2, x0, y0);
      

      it.printf(xc, yc, id(font_main), TextAlign::CENTER, "4");  
      it.printf(xc, yc  + radius*0.75, id(font_main), TextAlign::TOP_CENTER, "%.1fA", measured);  




      // Probe 5
      min_range = 0; 
      max_range = 10;
      xc = 100;
      yc = 95;

      it.image(xc-radius, yc-radius, id(image_gaugeA));

      
      measured = id(Probe_5).state;
      if (measured < min_range) {
        measured = min_range;
      } 
      if (measured > max_range) {
        measured = max_range;
      } 
      
      val = (measured - min_range) / abs(max_range - min_range) * alpha;        
      x0 = static_cast<int>(xc + radius * cos(pi / 2 + beta / 2 + val));
      y0 = static_cast<int>(yc + radius * sin(pi / 2 + beta / 2 + val));
      x1 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val + 0.1));
      y1 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val + 0.1));
      x2 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val - 0.1));
      y2 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val - 0.1));
      it.line(x0, y0, x1, y1);
      it.line(x1, y1, x2, y2);
      it.line(x2, y2, x0, y0);
      

      it.printf(xc, yc, id(font_main), TextAlign::CENTER, "5");  
      it.printf(xc, yc  + radius*0.75, id(font_main), TextAlign::TOP_CENTER, "%.1fA", measured);  




      // Probe 6
      min_range = 0; 
      max_range = 10;
      xc = 160;
      yc = 95;

      it.image(xc-radius, yc-radius, id(image_gaugeA));

      
      measured = id(Probe_6).state;
      if (measured < min_range) {
        measured = min_range;
      } 
      if (measured > max_range) {
        measured = max_range;
      } 
      
      val = (measured - min_range) / abs(max_range - min_range) * alpha;        
      x0 = static_cast<int>(xc + radius * cos(pi / 2 + beta / 2 + val));
      y0 = static_cast<int>(yc + radius * sin(pi / 2 + beta / 2 + val));
      x1 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val + 0.1));
      y1 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val + 0.1));
      x2 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val - 0.1));
      y2 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val - 0.1));
      it.line(x0, y0, x1, y1);
      it.line(x1, y1, x2, y2);
      it.line(x2, y2, x0, y0);
      

      it.printf(xc, yc, id(font_main), TextAlign::CENTER, "6");  
      it.printf(xc, yc  + radius*0.75, id(font_main), TextAlign::TOP_CENTER, "%.1fA", measured);  




      // Total parameters
      // Power gauge
      alpha = pi; // Defined as the gauge angle in radians (270deg)
      beta = 2*pi - alpha;
      radius = 40;              // Radius of the gauge in pixels
      thick = 7;    

      min_range = 0; 
      max_range = 5;
      xc = 245;
      yc = 65;

      it.image(xc-radius, yc-radius, id(image_gaugeB));
      
      measured = id(current_power).state;
      if (measured < min_range) {
        measured = min_range;
      } 
      if (measured > max_range) {
        measured = max_range;
      } 
      
      val = (measured - min_range) / abs(max_range - min_range) * alpha;        
      x0 = static_cast<int>(xc + radius * cos(pi / 2 + beta / 2 + val));
      y0 = static_cast<int>(yc + radius * sin(pi / 2 + beta / 2 + val));
      x1 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val + 0.1));
      y1 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val + 0.1));
      x2 = static_cast<int>(xc + (radius+thick) * cos(pi / 2 + beta / 2 + val - 0.1));
      y2 = static_cast<int>(yc + (radius+thick) * sin(pi / 2 + beta / 2 + val - 0.1));
      it.line(x0, y0, x1, y1);
      it.line(x1, y1, x2, y2);
      it.line(x2, y2, x0, y0);
      

      it.image(xc-11, yc-22, id(image_bolt));   

      it.printf(xc, yc + radius/2, id(font_main), TextAlign::BOTTOM_CENTER, "%.1fkW", measured);  
      // it.printf(xc, yc + radius/2, id(font_main), TextAlign::TOP_CENTER, "kW");  

      // Derivated parameters:
      measured = id(daily_power).state;
      it.printf(290, 85, id(font_main), TextAlign::TOP_RIGHT, "%.0fkWh", measured);  
      it.image(200, 85, id(image_power));    

      measured = id(electricity_price).state;
      it.image(200, 105, id(image_cash));          
      
      it.printf(275, 105, id(font_main), TextAlign::TOP_RIGHT, "%.2f", measured);  
      it.image(275, 105, id(image_euro));